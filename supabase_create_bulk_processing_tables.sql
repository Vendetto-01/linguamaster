-- Table to track overall bulk upload jobs
CREATE TABLE public.bulk_jobs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  status TEXT NOT NULL DEFAULT 'pending', -- e.g., pending, in_progress, completed, completed_with_errors, failed
  submitted_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  completed_at TIMESTAMPTZ NULL,
  total_words INTEGER NOT NULL DEFAULT 0,
  processed_words INTEGER NOT NULL DEFAULT 0,
  succeeded_words INTEGER NOT NULL DEFAULT 0,
  failed_words INTEGER NOT NULL DEFAULT 0,
  error_message TEXT NULL, -- For job-level failures
  -- user_id UUID NULL REFERENCES auth.users(id) ON DELETE SET NULL, -- Optional: if you have user accounts
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

COMMENT ON TABLE public.bulk_jobs IS 'Tracks bulk vocabulary upload jobs.';
COMMENT ON COLUMN public.bulk_jobs.status IS 'Current status of the bulk job.';

-- Table to store individual words within a bulk job and their status
CREATE TABLE public.bulk_job_words (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  job_id BIGINT NOT NULL REFERENCES public.bulk_jobs(id) ON DELETE CASCADE,
  word_text TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending', -- e.g., pending, processing, completed, failed
  processed_at TIMESTAMPTZ NULL,
  error_message TEXT NULL, -- For word-specific processing errors
  word_entry_id BIGINT NULL REFERENCES public.words(id) ON DELETE SET NULL, -- Optional: link to the created entry in the main 'words' table
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

COMMENT ON TABLE public.bulk_job_words IS 'Stores individual words for a bulk job and their processing status.';
COMMENT ON COLUMN public.bulk_job_words.job_id IS 'Foreign key to the bulk_jobs table.';
COMMENT ON COLUMN public.bulk_job_words.word_entry_id IS 'Optional link to the successfully created entry in the main words table.';


-- Trigger to automatically update `updated_at` for bulk_jobs
CREATE OR REPLACE FUNCTION public.handle_bulk_jobs_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_bulk_jobs_updated
  BEFORE UPDATE ON public.bulk_jobs
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_bulk_jobs_updated_at();

-- Trigger to automatically update `updated_at` for bulk_job_words
CREATE OR REPLACE FUNCTION public.handle_bulk_job_words_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_bulk_job_words_updated
  BEFORE UPDATE ON public.bulk_job_words
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_bulk_job_words_updated_at();